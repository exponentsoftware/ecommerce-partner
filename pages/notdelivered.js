import Navbar from '../components/Navbar'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import Loading from '@/components/Loading'
import { useRouter } from 'next/router'
import { getToken } from '@/Functions/getToken'
import ErrorComponent from '@/components/ErrorComponent'
import { getRequest, putRequest } from '@/Functions/Requests'
import { Logout } from '@/Functions/Logout'
import LinesEllipsis from 'react-lines-ellipsis'
import responsiveHOC from 'react-lines-ellipsis/lib/responsiveHOC'
import { BiRupee } from 'react-icons/bi'
import moment from 'moment'
const CryptoJS = require('crypto-js')
const ResponsiveEllipsis = responsiveHOC()(LinesEllipsis)


export default function notPacked() {
    const router = useRouter()
    const [getError, setGetError] = useState(false)
    const [loading, setLoading] = useState(true)
    const [orders, setOrders] = useState([])

    useEffect(() => {
        if (!getToken()) {
            router.push('/')
        }
        else {
            getProduct()
        }
    }, [])

    const getProduct = async () => {
        try {
            setLoading(true)
            const response = await getRequest('/api/notdeliver');
            if (response.message && response.message === 'Unauthorized') {
                router.push(Logout());
            }
            else if (response.message && response.message === 'Error, please try again') {
                setGetError(true);
                setTimeout(() => {
                    setGetError(false)
                }, 6000)
            }
            else {
                setLoading(false)
                const dataUpdate = await response.notPacked.map((e) => {
                    let bytesFullName = CryptoJS.AES.decrypt(e.fullName, process.env.JWT);
                    let decryptFullName = bytesFullName.toString(CryptoJS.enc.Utf8);
                    let bytesAdress = CryptoJS.AES.decrypt(e.DeliveryAddress, process.env.JWT);
                    let decryptAddress = bytesAdress.toString(CryptoJS.enc.Utf8)
                    let stillUtc = moment.utc(e.paymentDate).toDate();
                    let responseTime = moment(stillUtc).local().format('lll')
                    let packedTime = moment.utc(e.packedOn).toDate();
                    let defaultTime = moment(packedTime).local().format('lll')
                    return { ...e, fullName: decryptFullName,packedOn: defaultTime, DeliveryAddress: decryptAddress, paymentDate: responseTime }
                })
                setOrders(dataUpdate)
            }
        } catch (error) {
            setGetError(true);
            setTimeout(() => {
                setGetError(false)
            }, 6000)
        }
    }


    return (
        <>
            <Head>
                <title>Home - Seller</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="favicon.ico" />
            </Head>

            <main className='w-100 flex flex-col'>
                <Navbar />
                {getError && <ErrorComponent />}
                {!loading &&
                    <div className='flex w-full flex-col gap-2 overflow-hidden mt-20'>
                        <div className='p-2 text-sm w-full overflow-hidden rounded flex flex-col'>
                            <div className='w-full mb-4 flex text-sm md:px-3 uppercase justify-between items-center'>
                                <span className='font-medium'>Orders yet to deliver</span>
                            </div>

                            {orders.length >= 0 ? <div className="relative overflow-x-auto pb-4 mb-6 shadow-md sm:rounded-lg">
                                <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                                    <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                                        <tr>
                                            <th scope="col" className="p-4">
                                                Order ID
                                            </th>
                                            <th scope="col" className="p-4">
                                                Product
                                            </th>
                                            <th scope="col" className="p-4">
                                                Customer Name
                                            </th>
                                            <th scope="col" className="p-4 w-[15rem]">
                                                Delivery Address
                                            </th>
                                            <th scope="col" className="p-4">
                                                Amount Paid
                                            </th>
                                            <th scope="col" className="p-4">
                                                Payment Date & Time
                                            </th>
                                            <th scope="col" className="p-4">
                                                Packed on
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {orders.map((e, i) => {
                                            return (
                                                <tr key={`data${i}`} className="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                                                    <th scope="row" className="p-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                                        <Link href={`/order/${e._id}`} className='text-red-500 font-medium'>
                                                            {e.orderId}
                                                            {/* <ResponsiveEllipsis text={e.orderId}
                                                                maxLine='1'
                                                                ellipsis='...'
                                                                trimRight
                                                                basedOn='letters' /> */}
                                                        </Link>
                                                    </th>
                                                    <td className="p-4 font-medium">
                                                        <ResponsiveEllipsis key={`productId${i}`} text={e.products[0].product.title}
                                                            maxLine='1'
                                                            ellipsis=''
                                                            trimRight
                                                            basedOn='letters' />
                                                    </td>
                                                    <td className="p-4 font-medium">
                                                        <ResponsiveEllipsis text={e.fullName}
                                                            maxLine='1'
                                                            ellipsis=''
                                                            trimRight
                                                            basedOn='letters' />
                                                    </td>
                                                    <td className="p-4 w-[15rem] font-medium">
                                                        <ResponsiveEllipsis text={e.DeliveryAddress}
                                                            maxLine='1'
                                                            ellipsis=''
                                                            trimRight
                                                            basedOn='letters' />
                                                    </td>
                                                    <td className="p-4 whitespace-nowrap">
                                                        <span className='flex items-center font-medium'>
                                                            <BiRupee className='text-sm' />
                                                            <span>
                                                                <ResponsiveEllipsis text={e.grandTotal}
                                                                    maxLine='1'
                                                                    ellipsis='...'
                                                                    trimRight
                                                                    basedOn='letters' />
                                                            </span>
                                                        </span>
                                                    </td>
                                                    <td className="p-4 whitespace-nowrap font-medium">
                                                        {e.paymentDate}
                                                    </td>
                                                    <td className="p-4 whitespace-nowrap font-medium">
                                                        {e.packedOn}
                                                    </td>
                                                </tr>
                                            )
                                        })}
                                    </tbody>
                                </table>
                            </div>
                                :
                                <div className='w-full flex justify-center'>
                                    <span>No Order Yet.</span>
                                </div>
                            }
                        </div>
                    </div>
                }
                {loading && <Loading />}
            </main>
        </>
    )
}