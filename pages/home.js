import Navbar from '../components/Navbar'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import Loading from '@/components/Loading'
import { useRouter } from 'next/router'
import { getToken } from '@/Functions/getToken'
import ErrorComponent from '@/components/ErrorComponent'
import { getRequest } from '@/Functions/Requests'
import { Logout } from '@/Functions/Logout'
import Graph from '@/components/Graph'


export default function Home() {
    const router = useRouter()
    const [getError, setGetError] = useState(false)
    const [loading, setLoading] = useState(true)
    const [products, setProducts] = useState([])
    const [orders, setOrders] = useState([])
    const [delivered, setDelivered] = useState([])
    const [ordersNumber, setOrdersNumber] = useState(0)
    const [deliveredNumber, setdeliveredNumber] = useState(0)
    const [newProductsNumber, setnewProductsNumber] = useState(0)

    useEffect(() => {
        if (!getToken()) {
            router.push('/')
        }
        else {
            getProduct()
        }
    }, [])

    const getProduct = async () => {
        try {
            setLoading(true)
            const response = await getRequest('/api/home');
            if (response.message && response.message === 'Unauthorized') {
                router.push(Logout());
            }
            else if (response.message && response.message === 'Error, please try again') {
                setGetError(true);
                setTimeout(() => {
                    setGetError(false)
                }, 6000)
            }
            else {
                console.log(response)
                setProducts(response.sellerProducts)
                setOrders(response.sellerOrders)
                setnewProductsNumber(response.productLength.length)
                setOrdersNumber(response.orderLength.length)
                setdeliveredNumber(response.monthlyDelivered.length)
                setDelivered(response.deliveredOrders)
                setLoading(false)
            }
        } catch (error) {
            setGetError(true);
            setTimeout(() => {
                setGetError(false)
            }, 6000)
        }
    }


    return (
        <>
            <Head>
                <title>Seller</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="favicon.ico" />
            </Head>

            <main className='w-100 flex flex-col'>
                <Navbar />
                {getError && <ErrorComponent />}
                {!loading &&
                    <div className='w-full bg-white gap-4 text-sm pb-10 md:px-4 px-2 grid grid-cols-1 md:grid-cols-4 mt-20'>
                        <div className='w-full shadow-lg p-2 rounded gap-2 flex flex-col justify-center items-center'>
                            <span className='w-full text-left'>Statistics (this month)</span>
                            <Graph orders={ordersNumber} delivered={deliveredNumber} newProducts={newProductsNumber} />
                        </div>
                        <div className='w-full shadow-lg p-2 h-auto rounded gap-2 flex flex-col'>
                            <div className='w-full flex text-sm justify-between items-center'>
                                <span>Recent Delivered</span>
                                <Link href='/recentDelivered' className='ml-auto'>View All</Link>
                            </div>
                            {delivered.length >= 0 && delivered.map((e, i) => {
                                return (
                                    <Link key={`recentDelivered-${i}`} href={`/product/${e._id}`} className='px-2 text-red-500 text-ellipsis font-thin'>{i + 1}. {e.products[0].product.title}</Link>)
                            })}
                        </div>
                        <div className='w-full shadow-lg p-2 h-auto rounded gap-2 flex flex-col'>
                            <div className='w-full flex text-sm justify-between items-center'>
                                <span>Recent Order</span>
                                <Link href='/recentOrders' className='ml-auto'>View All</Link>
                            </div>
                            {orders.length >= 0 && orders.map((e, i) => {
                                return (
                                    <Link key={`recentOrders-${i}`} href={`/product/${e._id}`} className='px-2 text-red-500 text-ellipsis font-thin'>{i + 1}. {e.products[0].product.title}</Link>)
                            })}
                        </div>
                        <div className='w-full shadow-lg p-2 rounded gap-2 flex flex-col'>
                            <div className='w-full flex text-sm justify-between items-center'>
                                <span>Recent Products</span>
                                <Link href='/recentProducts' className='ml-auto'>View All</Link>
                            </div>
                            {products.length >= 0 && products.map((e, i) => {
                                return (
                                    <Link key={`recentProduct-${i}`} href={`/product/${e._id}`} className='px-2 text-red-500 text-ellipsis font-thin'>{i + 1}. {e.title}</Link>
                                )
                            })}
                        </div>
                    </div>
                }
                {loading && <Loading />}
            </main>
        </>
    )
}