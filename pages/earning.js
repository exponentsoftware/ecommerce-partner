import Navbar from '../components/Navbar'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import Loading from '@/components/Loading'
import { useRouter } from 'next/router'
import { getToken } from '@/Functions/getToken'
import ErrorComponent from '@/components/ErrorComponent'
import { getRequest } from '@/Functions/Requests'
import { Logout } from '@/Functions/Logout'
import { BiRupee } from 'react-icons/bi'


export default function Earning() {
    const router = useRouter()
    const [getError, setGetError] = useState(false)
    const [loading, setLoading] = useState(true)
    const [products, setProducts] = useState([])
    const [orders, setOrders] = useState([])
    const [delivered, setDelivered] = useState([])
    const [ordersNumber, setOrdersNumber] = useState(0)
    const [deliveredNumber, setdeliveredNumber] = useState(0)
    const [newProductsNumber, setnewProductsNumber] = useState(0)

    useEffect(() => {
        if (!getToken()) {
            router.push('/')
        }
        else {
            getProduct()
        }
    }, [])

    const getProduct = async () => {
        try {
            setLoading(true)
            const response = await getRequest('/api/home');
            if (response.message && response.message === 'Unauthorized') {
                router.push(Logout());
            }
            else if (response.message && response.message === 'Error, please try again') {
                setGetError(true);
                setTimeout(() => {
                    setGetError(false)
                }, 6000)
            }
            else {
                console.log(response)
                setProducts(response.sellerProducts)
                setOrders(response.sellerOrders)
                setnewProductsNumber(response.productLength.length)
                setOrdersNumber(response.orderLength.length)
                setdeliveredNumber(response.monthlyDelivered.length)
                setDelivered(response.deliveredOrders)
                setLoading(false)
            }
        } catch (error) {
            setGetError(true);
            setTimeout(() => {
                setGetError(false)
            }, 6000)
        }
    }


    return (
        <>
            <Head>
                <title>Earning - Seller</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="favicon.ico" />
            </Head>

            <main className='w-100 flex flex-col'>
                <Navbar />
                {getError && <ErrorComponent />}
                {/*                 {!loading && */}
                <div className='w-full bg-white gap-4 text-sm pb-10 md:px-4 px-2 grid grid-cols-2 md:grid-cols-4 mt-20'>
                    <div className='w-full shadow-lg text-sm p-2 rounded gap-2 flex flex-col'>
                        <span>This Month</span>
                        <span>
                            <BiRupee className="" />
                        </span>
                    </div>
                    <div className='w-full shadow-lg text-sm p-2 rounded gap-2 flex flex-col'>
                        <span>This Month</span>
                    </div>
                    <div className='w-full shadow-lg text-sm p-2 rounded gap-2 flex flex-col'>
                        <span>This Month</span>
                    </div>
                    <div className='w-full shadow-lg text-sm p-2 rounded gap-2 flex flex-col'>
                        <span>This Month</span>
                    </div>
                    <div className='w-full shadow-lg text-sm p-2 rounded gap-2 flex flex-col'>
                        <span>This Month</span>
                    </div>
                    <div className='w-full shadow-lg text-sm p-2 rounded gap-2 flex flex-col'>
                        <span>This Month</span>
                    </div>
                </div>
                {/*  } */}
                {/*  {loading && <Loading />} */}
            </main>
        </>
    )
}